[
    {
        "id": "9cc038cd8e0bff06",
        "type": "tab",
        "label": "NodeInput",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7c9bfcf79881fe54",
        "type": "tab",
        "label": "DataSending",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8a5a3f3fa3c39a4b",
        "type": "tab",
        "label": "Cleaner",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "85a818509d3554aa",
        "type": "tab",
        "label": "CheckDashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dbeb53d7877d3d90",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "{",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "a050bcfd77d2a04a",
        "type": "ui_tab",
        "name": "Meteostation",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cfbfa545e7bb0c15",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9397c6614a537120",
        "type": "ui_group",
        "name": "Current data",
        "tab": "a050bcfd77d2a04a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2999383859eb40b1",
        "type": "sqlitedb",
        "db": "/home/lumine220/meteostation.db",
        "mode": "RW"
    },
    {
        "id": "57603dc593de4500",
        "type": "mqtt-broker",
        "name": "Output",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bd181960f9fbbc74",
        "type": "ui_group",
        "name": "Database",
        "tab": "a050bcfd77d2a04a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "4e5b16a9bf0afca8",
        "type": "ui_spacer",
        "z": "85a818509d3554aa",
        "name": "spacer",
        "group": "bd181960f9fbbc74",
        "order": 2,
        "width": 6,
        "height": 1
    },
    {
        "id": "03a90ba1902b656a",
        "type": "ui_spacer",
        "z": "85a818509d3554aa",
        "name": "spacer",
        "group": "bd181960f9fbbc74",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "b649d3629581ad54",
        "type": "ui_spacer",
        "z": "85a818509d3554aa",
        "name": "spacer",
        "group": "bd181960f9fbbc74",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "1d1e29486d2abb58",
        "type": "serial in",
        "z": "9cc038cd8e0bff06",
        "name": "UNO",
        "serial": "dbeb53d7877d3d90",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "7bf1f1810e68b0f8"
            ]
        ]
    },
    {
        "id": "7bf1f1810e68b0f8",
        "type": "function",
        "z": "9cc038cd8e0bff06",
        "name": "DHT data",
        "func": "let message = msg.payload.replace(\"{\", \"\").replace(\"}\", \"\");\nlet data = message.split(\";\");\n\nlet output = {};\n\noutput.temp = Number(data[0]);\noutput.hum = Number(data[1]);\n\n\n// temp|hum\nreturn output;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 140,
        "wires": [
            [
                "e6f2a27de28c92b5",
                "018f04bb891dc0c9"
            ]
        ]
    },
    {
        "id": "e6f2a27de28c92b5",
        "type": "link out",
        "z": "9cc038cd8e0bff06",
        "name": "linkOutForCheck",
        "mode": "link",
        "links": [
            "120262952f2a20e4"
        ],
        "x": 445,
        "y": 100,
        "wires": []
    },
    {
        "id": "018f04bb891dc0c9",
        "type": "function",
        "z": "9cc038cd8e0bff06",
        "name": "INSERT query",
        "func": "// temp|hum\nmsg.params = [msg.temp, msg.hum];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "8aaf910c3458291a"
            ]
        ]
    },
    {
        "id": "8aaf910c3458291a",
        "type": "sqlite",
        "z": "9cc038cd8e0bff06",
        "mydb": "2999383859eb40b1",
        "sqlquery": "prepared",
        "sql": "INSERT INTO measured_data (temperature, humidity)\nVALUES (?, ?)",
        "name": "INSERT",
        "x": 700,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f4ec151c747150e9",
        "type": "inject",
        "z": "7c9bfcf79881fe54",
        "name": "Start every 15 minutes",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "30ac522761cec396"
            ]
        ]
    },
    {
        "id": "30ac522761cec396",
        "type": "sqlite",
        "z": "7c9bfcf79881fe54",
        "mydb": "2999383859eb40b1",
        "sqlquery": "fixed",
        "sql": "SELECT id, temperature, humidity, `timestamp` \nFROM measured_data\nWHERE sentAway=0\nORDER BY `timestamp` ASC\nLIMIT 100;",
        "name": "SELECT data for call",
        "x": 380,
        "y": 80,
        "wires": [
            [
                "085c442d3daef2f2",
                "dfcf0229b8f49585"
            ]
        ]
    },
    {
        "id": "085c442d3daef2f2",
        "type": "switch",
        "z": "7c9bfcf79881fe54",
        "name": "Check if data",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "a0c665989113e220"
            ]
        ]
    },
    {
        "id": "e94aca6c6a20370e",
        "type": "http request",
        "z": "7c9bfcf79881fe54",
        "name": "POST request",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://meteo-station.azurewebsites.net/api/data",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            },
            {
                "keyType": "other",
                "keyValue": "api-key",
                "valueType": "other",
                "valueValue": "ff10bd4f5b8501c5d4f99bd498799dfaf121bcefd5f0028fb20094825f44bb54"
            }
        ],
        "x": 1000,
        "y": 220,
        "wires": [
            [
                "c77c807196443962",
                "08a9a42398952f27"
            ]
        ]
    },
    {
        "id": "a0c665989113e220",
        "type": "function",
        "z": "7c9bfcf79881fe54",
        "name": "Prepare data from call",
        "func": "const groupByInterval = (data, intervalMinutes) => {\n    let currentMinute = new Date(data[0].timestamp).getTime();\n    let groups = [[]];\n    for (const item of data) {\n        const itemMinute = new Date(item.timestamp).getTime();\n        const minuteDiff = (itemMinute - currentMinute) / (1000 * 60);\n        if (minuteDiff >= intervalMinutes) {\n            currentMinute = itemMinute;\n            groups.push([]);\n        }\n        groups[groups.length - 1].push(item);\n    }\n    return groups;\n};\n\nconst input = msg.payload;\nconst groupedArray = groupByInterval(input, 5);\nlet data_for_body = [];\n\ngroupedArray.forEach(function (group) {\n    let sumTemp = 0;\n    let sumHum = 0;\n    let count = 0;\n    let lastItem = group[group.length - 1];\n    let ts = lastItem.timestamp;\n    group.forEach(function (oneRow) {\n        sumTemp += oneRow.temperature;\n        sumHum += oneRow.humidity;\n        count++;\n    });\n    var tzoffset = (new Date()).getTimezoneOffset() * 60000;\n    var localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, -1);\n    data_for_body.push({\n        temperature: (sumTemp / count).toFixed(2),\n        humidity: (sumHum / count).toFixed(2),\n        date: localISOTime,\n    });\n});\nlet ids = [];\n\n\ninput.forEach(function (arrayObject) {\n    ids.push(arrayObject.id);\n});\nflow.set(\"ids\", ids);\n\n\nreturn { payload: data_for_body };\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 220,
        "wires": [
            [
                "676a0fe9442f5f5f",
                "7e6ebc21f1c6811c"
            ]
        ]
    },
    {
        "id": "7e6ebc21f1c6811c",
        "type": "function",
        "z": "7c9bfcf79881fe54",
        "name": "Body",
        "func": "let data = msg.payload;\nlet body = {};\n\nbody.deviceid = \"644acaca520740ec31a5ea20\";\nbody.data = data;\n\nreturn { payload: body };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 220,
        "wires": [
            [
                "07e8b7d2a70b28d8"
            ]
        ]
    },
    {
        "id": "c77c807196443962",
        "type": "switch",
        "z": "7c9bfcf79881fe54",
        "name": "Check response",
        "property": "statusCode",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "201",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 80,
        "y": 360,
        "wires": [
            [
                "cfdc2755cf0730ec"
            ]
        ]
    },
    {
        "id": "cfdc2755cf0730ec",
        "type": "function",
        "z": "7c9bfcf79881fe54",
        "name": "UPDATE query",
        "func": "let newMsg = flow.get(\"ids\");\nlet query = `UPDATE measured_data SET sentAway = 1 WHERE id IN(${ newMsg });`\n\nreturn { topic: query };\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 440,
        "wires": [
            [
                "bf8917b9a3f32df8"
            ]
        ]
    },
    {
        "id": "bf8917b9a3f32df8",
        "type": "sqlite",
        "z": "7c9bfcf79881fe54",
        "mydb": "2999383859eb40b1",
        "sqlquery": "msg.topic",
        "sql": "UPDATE data_for_call \nSET sendAway = 1 \nWHERE id IN($data);",
        "name": "UPDATE",
        "x": 360,
        "y": 540,
        "wires": [
            [
                "29565c92b4b37d08",
                "6debfb144138fd24"
            ]
        ]
    },
    {
        "id": "08a9a42398952f27",
        "type": "debug",
        "z": "7c9bfcf79881fe54",
        "name": "response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 160,
        "wires": []
    },
    {
        "id": "07e8b7d2a70b28d8",
        "type": "json",
        "z": "7c9bfcf79881fe54",
        "name": "json",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 830,
        "y": 220,
        "wires": [
            [
                "e94aca6c6a20370e"
            ]
        ]
    },
    {
        "id": "29565c92b4b37d08",
        "type": "debug",
        "z": "7c9bfcf79881fe54",
        "name": "SQL UPDATE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 540,
        "wires": []
    },
    {
        "id": "676a0fe9442f5f5f",
        "type": "debug",
        "z": "7c9bfcf79881fe54",
        "name": "body",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 180,
        "wires": []
    },
    {
        "id": "dfcf0229b8f49585",
        "type": "debug",
        "z": "7c9bfcf79881fe54",
        "name": "Selected data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 20,
        "wires": []
    },
    {
        "id": "6debfb144138fd24",
        "type": "switch",
        "z": "7c9bfcf79881fe54",
        "name": "Check if UPDATE ok",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 220,
        "y": 180,
        "wires": [
            [
                "30ac522761cec396"
            ]
        ]
    },
    {
        "id": "b1b13d7e0aafc0a4",
        "type": "inject",
        "z": "8a5a3f3fa3c39a4b",
        "name": "once a day",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "57eca05273bcbf2f"
            ]
        ]
    },
    {
        "id": "57eca05273bcbf2f",
        "type": "sqlite",
        "z": "8a5a3f3fa3c39a4b",
        "mydb": "2999383859eb40b1",
        "sqlquery": "fixed",
        "sql": "DELETE FROM measured_data\nWHERE sentAway=1 AND timestamp<=datetime('now', '-1 day');",
        "name": "DELETE sent data",
        "x": 330,
        "y": 80,
        "wires": [
            [
                "6940abb749042df0"
            ]
        ]
    },
    {
        "id": "6940abb749042df0",
        "type": "debug",
        "z": "8a5a3f3fa3c39a4b",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 160,
        "wires": []
    },
    {
        "id": "120262952f2a20e4",
        "type": "link in",
        "z": "85a818509d3554aa",
        "name": "linkInFromNode",
        "links": [
            "e6f2a27de28c92b5"
        ],
        "x": 165,
        "y": 160,
        "wires": [
            [
                "8f64468a1d063136"
            ]
        ]
    },
    {
        "id": "8f64468a1d063136",
        "type": "function",
        "z": "85a818509d3554aa",
        "name": "parseDataForCheck",
        "func": "let output = msg;\n\nlet temp = {}\nlet hum = {}\n\ntemp.payload = output.temp\nhum.payload = output.hum\n\nreturn [temp, hum];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "35efe6e7e03d0bb8"
            ],
            [
                "5c8004d068a919f6"
            ]
        ]
    },
    {
        "id": "35efe6e7e03d0bb8",
        "type": "ui_gauge",
        "z": "85a818509d3554aa",
        "name": "Temperature",
        "group": "9397c6614a537120",
        "order": 1,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature",
        "label": "units",
        "format": "{{value}}",
        "min": "-40",
        "max": "80",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 100,
        "wires": []
    },
    {
        "id": "5c8004d068a919f6",
        "type": "ui_gauge",
        "z": "85a818509d3554aa",
        "name": "Humidity",
        "group": "9397c6614a537120",
        "order": 2,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Humidity",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#0015b3",
            "#da33e6",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 600,
        "y": 160,
        "wires": []
    },
    {
        "id": "5194a35266dc90bc",
        "type": "inject",
        "z": "85a818509d3554aa",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 340,
        "wires": [
            [
                "79b70fbe593b2f72"
            ]
        ]
    },
    {
        "id": "79b70fbe593b2f72",
        "type": "sqlite",
        "z": "85a818509d3554aa",
        "mydb": "2999383859eb40b1",
        "sqlquery": "fixed",
        "sql": "SELECT * FROM measured_data;",
        "name": "SELECT node data",
        "x": 450,
        "y": 340,
        "wires": [
            [
                "abcc67bd901abcf6"
            ]
        ]
    },
    {
        "id": "abcc67bd901abcf6",
        "type": "ui_table",
        "z": "85a818509d3554aa",
        "group": "bd181960f9fbbc74",
        "name": "",
        "order": 1,
        "width": 6,
        "height": 4,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 690,
        "y": 340,
        "wires": []
    }
]